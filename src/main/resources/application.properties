# AFOS local test db
spring.datasource.url=jdbc:h2:file:~/afostestdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# Enabling H2 Console
spring.h2.console.enabled=true

# Custom H2 Console URL
spring.h2.console.path=/h2-console

#Turn Statistics on and log SQL stmts
#spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.format_sql=true

#If want to see very extensive logging
#spring.jpa.properties.hibernate.generate_statistics=true
#logging.level.org.hibernate.type=trace
#logging.level.org.hibernate.stat=debug

#We can either choose to let Hibernate create the schema using entity classes or use schema.sql,
# but we CANNOT DO BOTH. https://www.baeldung.com/spring-boot-data-sql-and-schema-sql
#Schema will be created using schema.sql file if this property has value "none"
# That can be used for dev, otherwise can be update
spring.jpa.hibernate.ddl-auto=create-drop
#spring.jpa.hibernate.hbm2ddl.auto=create
# Also, to add some initial data to our application, we need to create a new SQL file,
# with some insert statements and put it in our resources folder.
# We can use import.sql (Hibernate support) or data.sql (Spring JDBC support) files to load data.


# JPA-Schema-Generation
# Use below configuration to generate database schema create commands based on the entity models
# and export them into the create.sql file
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=create.sql
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-source=metadata
#spring.jpa.properties.hibernate.format_sql=true


